---
swagger: "2.0"
info:
  description: "Audit Server service"
  version: "1.0.0"
  title: "Audit Server API"
host: "server"
basePath: "/v1"
schemes:
- "http"
produces:
- "application/json"
paths:
  /audit/transaction:
    get:
      summary: "get audit transactions"
      description: "Returns transactions that meet the query.\n"
      operationId: "auditTransactionGET"
      parameters:
      - name: "q.timestamp_from"
        in: "query"
        description: "Transaction from timestamp."
        required: false
        type: "number"
        format: "long"
      - name: "q.timestamp_to"
        in: "query"
        description: "Transaction to timestamp."
        required: false
        type: "number"
        format: "long"
      - name: "q.user_id"
        in: "query"
        description: "Transaction user id."
        required: false
        type: "string"
      - name: "q.application_id"
        in: "query"
        description: "Transaction application id."
        required: false
        type: "string"
      - name: "q.tracking_id"
        in: "query"
        description: "Transaction tracking id."
        required: false
        type: "string"
      - name: "q.external_id"
        in: "query"
        description: "Transaction external id."
        required: false
        type: "string"
      - name: "q.transaction_id"
        in: "query"
        description: "Transaction transaction id."
        required: false
        type: "string"
      - name: "q.transaction_type"
        in: "query"
        description: "Transaction transaction type."
        required: false
        type: "string"
      - name: "q.event_details"
        in: "query"
        description: "Transaction event details."
        required: false
        type: "string"
      - name: "q.status"
        in: "query"
        description: "Transaction status."
        required: false
        type: "string"
      - name: "q.resource_id"
        in: "query"
        description: "Transaction resource id."
        required: false
        type: "string"
      - name: "q.service_name"
        in: "query"
        description: "Transaction service name."
        required: false
        type: "string"
      - name: "limit"
        in: "query"
        description: "Max number of records to return"
        required: false
        type: "string"
      responses:
        200:
          description: "An array of transactions"
          schema:
            $ref: "#/definitions/Transactions"
        default:
          description: "Unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Default"
    post:
      summary: "put audit transactions"
      description: "Insert audit transactions\n"
      operationId: "auditTransactionPOST"
      parameters:
      - in: "body"
        name: "transaction"
        description: "The audit transaction to add"
        required: true
        schema:
          $ref: "#/definitions/Transaction"
      responses:
        201:
          description: "Null response"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Default"
definitions:
  Transactions:
    type: "object"
    properties:
      transactions:
        type: "array"
        items:
          $ref: "#/definitions/Transaction"
  Transaction:
    type: "object"
    properties:
      timestamp:
        type: "number"
        format: "long"
        description: "Time of audit record in milliseconds since 1/1/1970."
      user_id:
        type: "string"
        description: "The concrete user which initiated this transaction (i.e the\
          \ SSP user for which a create action was initiated)."
      application_id:
        type: "string"
        description: "(SSP, eCOMP, etc)."
      tracking_id:
        type: "string"
        description: "The “session” identifier for a set of transactions, and will\
          \ be the same all through the flow. So if SSP calls CMS with its own transaction\
          \ id, it should also be used as the tracking id. If it does not include\
          \ some identifier, the CMS generated transaction id can serve as the tracking\
          \ id. Either way, that tracking id will be preserved and identify all actions\
          \ along the flow – on RDS, by the ORD, etc."
      external_id:
        type: "string"
        description: "Anything we get from outside the ORM. For example, if the SSP\
          \ has its own transaction ID, it may forward it to us."
      transaction_id:
        type: "string"
        description: "The transaction ID of the component creating the current record."
      transaction_type:
        type: "string"
        description: "The type of transaction (depends on the application business\
          \ logic)."
      event_details:
        type: "string"
        description: "Free description, may be transaction type specific data."
      status:
        type: "string"
        description: "The transaction status (depends on the application business\
          \ logic)."
      resource_id:
        type: "string"
        description: "The UUID of the resource on which this action is operating."
      service_name:
        type: "string"
        description: "The service which initiated the log ie- CMS, RDS, RMS...."
  Error:
    type: "object"
    properties:
      faultcode:
        type: "string"
      faultstring:
        type: "string"
      debuginfo:
        type: "string"
